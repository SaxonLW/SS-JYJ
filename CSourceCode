/*
 ============================================================================
 Name        : ISYS358.c
 Author      : Saxon Lysaght-Wheeler
 Version     :
 Copyright   : Your copyright notice
 Description : C code that will be translated to Cython
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct person {
	char* name;
	char* address;
	unsigned int postcode;
	unsigned int ID;

	struct person * relationships;


}Person;

typedef struct personList{
	Person * list;
	unsigned int size;
}PersonList;

typedef struct personRefList{
	Person ** list;
	unsigned int size;
}PersonRefList;

FILE * output;

FILE * input;

int blInt = 0;

void bl (){
	blInt++;
	printf ("\nbreakLine\t%d\n", blInt);
	fflush(stdout);
}

static char *rand_string(char *str, size_t size)
{
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJK";
    if (size) {
        --size;
        for (size_t n = 0; n < size; n++) {
            int key = rand() % (int) (sizeof charset - 1);
            str[n] = charset[key];
        }
        str[size] = '\0';
    }
    return str;
}

void printList(PersonList passedList){

	for(int i = 0; i < passedList.size; i++){
		printf("%d\t%s\t%s\t%d\n",passedList.list[i].ID,passedList.list[i].name,passedList.list[i].address,passedList.list[i].postcode);
		fprintf(output,"%d\t%s\t%s\t%d\n",passedList.list[i].ID,passedList.list[i].name,passedList.list[i].address,passedList.list[i].postcode);
	}
}

void printSortedList (PersonRefList list){
	for (unsigned int i = 0; i < list.size; i++){
		printf("%d\t%s\t%s\t%d\n",list.list[i]->ID,list.list[i]->name,list.list[i]->address,list.list[i]->postcode);
		fprintf(output,"%d\t%s\t%s\t%d\n",list.list[i]->ID,list.list[i]->name,list.list[i]->address,list.list[i]->postcode);
	}
}

void assignRandom (PersonList * baseList){
	for (int i = 0; i < baseList->size; i++){
		baseList->list[i].name = calloc(20, sizeof(char));
		rand_string(baseList->list [i].name,20);

		baseList->list[i].address = calloc(20,sizeof(char));
		rand_string(baseList->list[i].address, 20);

		baseList->list[i].postcode = rand()%1000 + 2000;

		baseList->list[i].ID = i;
	}
}

void createShallowCopy (PersonList * original, PersonRefList * shallow){
	shallow->size = original->size;
	shallow->list = (Person**)calloc(shallow->size,sizeof(Person*));
	Person * tmp = &original->list[0];
	unsigned int size = &original->list[1] - &original->list[0];
	for (int i = 0; i < shallow->size; i++){
		shallow->list[i] = tmp;
		tmp += size;
	}
}

unsigned int partition (PersonRefList * list, unsigned int l, unsigned int r){
	unsigned int pivot, i, j;
	Person * t;
	pivot = list->list[l]->postcode;
	i = l;
	j = r +1;

	while (1){

		do{
			i++;
		} while (list->list[i]->postcode <= pivot && i < r);

		do {
			j--;
		} while (list->list[j]->postcode > pivot);

		if (i >=j){
			break;
		}
		t = list->list[i];
		list->list[i] = list->list[j];
		list->list[j] = t;
	}

	t = list->list[l];
	list->list[l] = list->list[j];
	list->list[j] = t;
	return j;
}

void quickSort (PersonRefList * list, unsigned int l, unsigned int r){
	unsigned int j;
	if (l < r){
		j = partition(list,l,r);
		quickSort(list,l,j-1);
		quickSort(list,j+1,r);
	}
}

void sortListPostCode (PersonRefList * list){
	quickSort(list, 0, list->size-1);
}

int main(int argv, char** argc) {
	srand(time(NULL));

	PersonList baseList;

	input = fopen ("Input.txt", "r");

	output = fopen ("Output.txt", "w");

	unsigned int length = 1000000;

	baseList.list = (Person*) calloc (length,sizeof(Person));
	baseList.size = length;

	assignRandom(&baseList);

	PersonRefList listCopy;

	time_t start;
	time_t endSort;
	time_t endGroup;

	start = time(NULL);

	createShallowCopy (&baseList,&listCopy);

	sortListPostCode(&listCopy);

	endSort = time(NULL);

	printf("\nTime to sort %d entries;\t%ld",length, (endSort-start));
	fflush(stdout);

	printSortedList (listCopy);

	fclose (input);
	fclose(output);

	return EXIT_SUCCESS;
}
